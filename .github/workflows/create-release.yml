name: create-release
on:
  # push:
  #   branches: [ main ]
  workflow_dispatch:

jobs:
  create-releases:
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ github.event.repository.default_branch }}
      - uses: actions/checkout@v3

      - name: Get latest release
        id: get_latest_release
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          route: GET /repos/{repo}/releases/latest
          repo: ${{ github.repository }}
      - name: Set latest release
        run: |
          echo "latest_release_tag=${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}" >> "$GITHUB_ENV"

      - name: Set latest tag
        run: |
          git fetch --prune --unshallow
          echo "latest_tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_ENV"

      - name: Set release datetime
        env:
          TZ: 'Asia/Tokyo'
        run: |
          release_datetime=$(date +'%Y%m%d-%H%M')
          echo "release_tag=v$release_datetime" >> $GITHUB_ENV

      - name: Generate release notes
        id: get_release_notes
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          route: POST /repos/{repo}/releases/generate-notes
          repo: ${{ github.repository }}
          tag_name: ${{ env.latest_tag }}
          target_commitish: main
          previous_tag_name: ${{ env.latest_release_tag }}

      # - name: Create Release
      #   if: env.latest_release_tag != env.latest_tag
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.latest_tag }}
      #     release_name: ${{'v'}}${{ env.release_datetime }}
      #     body: ${{ fromJson(steps.get_release_notes.outputs.data).body }}
      #     draft: false
      #     prerelease: false
